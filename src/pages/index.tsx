import Head from "next/head";
import { useState } from "react";

import Form from "@/components/Form";
import List from "@/components/List";
import Navbar from "@/components/Navbar";

import axios from 'axios';

import { GetServerSideProps } from "next";

import useDeleteManyTask from "@/hooks/useDeleteManyTask";
import useFetchAllTask from "@/hooks/useFetchAllTask";

//Introjs
import { Steps, } from "intro.js-react";

//next-auth
import { useSession } from "next-auth/react"


export type task = {
  id: string;
  value: string;
  completed: boolean;
  userId: string;
}

type FilterMapType = {
  [k: string]: (task: task) => boolean
}
const FILTER_MAP: FilterMapType = {
  All: () => true,
  Active: (task: task) => !task.completed,
  Completed: (task: task) => task.completed,
};

type HomePropsType = {
  [k: string]: any
}


export default function Home({ tasks }: any) {

  const { data: session } = useSession()

  const { data } = useFetchAllTask(tasks);

  const [filter, setFilter] = useState("All");
  const { mutate } = useDeleteManyTask();

  function handleClearCompleted() {
    mutate({
      userEmail: session?.user?.email
    })
  }

  const ActiveTaskNumberChecker = data.tasks?.filter(FILTER_MAP["Active"]).length
  const tasksNoun = ActiveTaskNumberChecker > 1 ? "tasks" : "task";
  const taskNumber = !ActiveTaskNumberChecker ? 0 : ActiveTaskNumberChecker
  const HowManyTodosLeftText = `${taskNumber} ${tasksNoun} remaining`;


  const [{ stepsEnabled, initialStep, steps, options }, setState] = useState({
    stepsEnabled: true,
    initialStep: 0,
    steps: [
      {
        element: ".class-for-login-button-introjs",
        intro: "Login to save your Tasks"
      },
    ],
    options: {
      showProgress: false,
      exitOnEsc: true,
      showBullets: false
    }
  })
  function onExit() {
    setState((oldState) => ({ ...oldState, stepsEnabled: false }))
  }

  return (
    <>
      <Head>
        <title>Todo List App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>


      {
        !session &&
        <Steps
          enabled={stepsEnabled}
          steps={steps}
          initialStep={initialStep}
          onExit={onExit}
          options={options}
        />
      }

      <div className="bg-very-light-gray h-screen relative">

        <header>
          <Navbar session={session} />
        </header>

        <div className="todo_main flex flex-col mx-auto">
          <div className="flex justify-between mb-9 sm:mb-12">
            <h1 className="main_heading font-bold tracking-[0.75rem] sm:tracking-[1rem] text-3xl text-very-light-gray">
              TODO
            </h1>
          </div>

          <Form />

          <div className="mt-6 ">
            <div className="rounded-md shadow-xl ">
              <>
                <div
                  className="flex flex-col "
                >
                  {data.tasks?.filter(FILTER_MAP[filter]).map((task: any) => (
                    <List
                      key={task.id}
                      task={task}
                    />
                  ))}
                </div>

                <div className=" flex bg-very-light-gray text-light-bottom-text text-sm font-bold py-5 px-6 ">
                  <div className="mr-auto sm:mr-0">{HowManyTodosLeftText}</div>

                  <ul className=" list-none hidden sm:flex mx-auto gap-5 ">
                    <li
                      onClick={() => setFilter("All")}
                      className={`${filter === "All" ? "filterClicked" : ""
                        } hover:text-input-text-light cursor-pointer`}
                    >
                      All
                    </li>
                    <li
                      onClick={() => setFilter("Active")}
                      className={`${filter === "Active" ? "filterClicked" : ""
                        } hover:text-input-text-light cursor-pointer`}
                    >
                      Active
                    </li>
                    <li
                      onClick={() => setFilter("Completed")}
                      className={`${filter === "Completed" ? "filterClicked" : ""
                        } hover:text-input-text-light cursor-pointer`}
                    >
                      Completed
                    </li>
                  </ul>

                  <div
                    className=" hover:text-input-text-light cursor-pointer"
                    onClick={handleClearCompleted}
                  >
                    Clear Completed

                  </div>
                </div>

              </>

            </div>

            <div className=" flex sm:hidden mt-3 shadow-xl rounded-md bg-very-light-gray py-4">
              <ul className=" list-none text-sm font-bold flex mx-auto gap-5 ">
                <li
                  onClick={() => setFilter("All")}
                  className={`  text-light-bottom-text  ${filter === "All" ? "filterClicked" : ""
                    }  cursor-pointer`}
                >
                  All
                </li>
                <li
                  onClick={() => setFilter("Active")}
                  className={` ${filter === "Active" ? "filterClicked" : ""
                    }  text-light-bottom-text  cursor-pointer`}
                >
                  Active
                </li>
                <li
                  onClick={() => setFilter("Completed")}
                  className={` ${filter === "Completed" ? "filterClicked" : ""
                    }  text-light-bottom-text  cursor-pointer`}
                >
                  Completed
                </li>
              </ul>
            </div>

            <p className="text-light-bottom-text text-center font-bold text-sm tracking-wider mt-10 sm:mt-12">
              Drag and drop to reorder list
            </p>

          </div>
        </div>
      </div>
    </>
  );
}


export const getServerSideProps: GetServerSideProps = async (context) => {

  const res = await axios.get(`${process.env.NEXT_PUBLIC_DOMAIN_URL}/api/allTodos`)
  const { tasks } = await res.data;


  return {
    props: {
      tasks: tasks
    }, // will be passed to the page component as props
  };
}